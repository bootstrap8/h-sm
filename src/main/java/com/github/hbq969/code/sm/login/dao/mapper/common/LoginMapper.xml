<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.hbq969.code.sm.login.dao.LoginDao">
    <select id="queryRoleList" resultType="com.github.hbq969.code.sm.login.dao.entity.RoleEntity"
            parameterType="com.github.hbq969.code.sm.login.dao.entity.RoleEntity">
        select
        app AS "app",
        name AS "name",
        description AS "desc",
        created_at AS "createdAt",
        updated_at AS "updatedAt"
        from h_roles
        <where>
            and app = #{app}
            <if test="name!='ADMIN'">
                and name = #{name}
            </if>
        </where>
    </select>

    <insert id="saveRoleEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.RoleEntity">
        insert into h_roles(app, name, description, created_at)
        values (#{app}, #{name}, #{desc}, #{createdAt})
    </insert>

    <update id="updateRoleEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.RoleEntity">
        update h_roles
        <set>
            <if test="desc!=null and desc!=''">
                description = #{desc},
            </if>
            updated_at=#{updatedAt}
            where name=#{name}
            and app=#{app}
        </set>
    </update>

    <delete id="deleteRoleEntity">
        delete
        from h_roles
        where name = #{name}
          and app = #{app}
    </delete>

    <select id="queryRoleMenus" resultType="java.util.Map">
        select b.name      AS "key",
               b.menu_desc AS "label",
               b.url       AS "url"
        from h_role_menus a,
             h_menus b
        where a.menu_name = b.name
          and a.app = b.app
          and a.app = #{app}
          and a.role_name = #{roleName}
        order by b.created_at asc
    </select>

    <select id="queryRoleMenus2" resultType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity">
        select b.app         AS "app",
               b.name        AS "name",
               b.menu_desc   AS "menuDesc",
               b.url         AS "url",
               b.parent_key  AS "parentId",
               b.menu_level  AS "menuLevel",
               b.order_index AS "orderIndex",
               b.icon_name   AS "iconName",
               b.created_at  AS "createdAt",
               b.updated_at  AS "updatedAt"
        from h_role_menus a,
             h_menus b
        where a.menu_name = b.name
          and a.app = b.app
          and a.app = #{app}
          and a.role_name = #{roleName}
        order by b.created_at asc
    </select>

    <select id="queryUserList" resultType="com.github.hbq969.code.sm.login.dao.entity.UserEntity"
            parameterType="com.github.hbq969.code.sm.login.dao.entity.UserEntity">
        select
        a.app AS "app",
        a.username AS "username",
        a.password AS "password",
        a.role_name AS "roleName",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_name=b.name
            and a.app=b.app
            and a.app = #{app}
            <if test="roleName!='ADMIN'">
                and a.role_name = #{roleName}
                and a.username = #{username}
            </if>
        </where>
    </select>

    <select id="queryUserEntity" resultType="com.github.hbq969.code.sm.login.dao.entity.UserEntity">
        select
        a.app AS "app",
        a.username AS "username",
        a.password AS "password",
        a.role_name AS "roleName",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_name=b.name
            and a.app=b.app
            and a.app=#{app}
            and a.username=#{username}
        </where>
    </select>

    <delete id="saveUserEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.UserEntity">
        insert into h_users(app,username, password, role_name, created_at)
        values (#{app}, #{username}, #{password}, #{roleName}, #{createdAt})
    </delete>

    <update id="updateUserEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.UserEntity">
        update h_users
        <set>
            <if test="roleName!=null and roleName!=''">
                role_name = #{roleName},
            </if>
            updated_at=#{updatedAt}
            where username=#{username}
            and app=#{app}
        </set>
    </update>

    <delete id="deleteUserEntity">
        delete
        from h_users
        where username = #{username}
          and app=#{app}
    </delete>

    <delete id="deleteUserEntities">
        delete
        from h_users
        where role_name = #{roleName}
          and app = #{app}
    </delete>

    <select id="queryMenuList" resultType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity"
            parameterType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity">
        select
        app AS "app",
        name AS "name",
        menu_desc AS "menuDesc",
        url AS "url",
        parent_key AS "parentId",
        menu_level AS "menuLevel",
        order_index AS "orderIndex",
        icon_name AS "iconName",
        created_at AS "createdAt",
        updated_at AS "updatedAt"
        from h_menus
        <where>
            and app=#{app}
            <if test="name!=null and name!=''">
                <bind name="nameLike" value="'%' + name + '%'"/>
                and name like #{nameLike}
            </if>
            <if test="url!=null and url!=''">
                <bind name="urlLike" value="'%' + url + '%'"/>
                and url like #{urlLike}
            </if>
        </where>
        order by created_at asc
    </select>

    <delete id="saveMenuEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity">
        insert into h_menus(app, name, menu_desc, url, parent_key, menu_level, icon_name, order_index, created_at)
        values (#{app}, #{name}, #{menuDesc}, #{url}, #{parentId}, #{menuLevel}, #{iconName}, #{orderIndex},
                #{createdAt})
    </delete>

    <update id="updateMenuEntity" parameterType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity">
        update h_menus
        set name        = #{name},
            menu_desc   = #{menuDesc},
            url         = #{url},
            parent_key  = #{parentId},
            menu_level  = #{menuLevel},
            icon_name   = #{iconName},
            order_index = #{orderIndex},
            updated_at=#{updatedAt}
        where name = #{name}
          and app = #{app}
    </update>

    <delete id="deleteMenuEntity">
        delete
        from h_menus
        where name = #{name}
          and app=#{app}
    </delete>

    <select id="querySubMenuList" resultType="com.github.hbq969.code.sm.login.dao.entity.MenuEntity">
        select
            app AS "app",
            name AS "name",
            menu_desc AS "menuDesc",
            url AS "url",
            parent_key AS "parentId",
            menu_level AS "menuLevel",
            order_index AS "orderIndex",
            icon_name AS "iconName",
            created_at AS "createdAt",
            updated_at AS "updatedAt"
        from h_menus
        where app=#{app}
          and parent_key=#{parentId}
    </select>

    <delete id="deleteMenuEntities">
        delete
        from h_role_menus
        where role_name = #{roleName}
          and app = #{app}
    </delete>

    <delete id="deleteMenuForRole">
        delete
        from h_role_menus
        where menu_name = #{menuName}
          and app = #{app}
    </delete>

    <update id="updateUserPassword" parameterType="com.github.hbq969.code.sm.login.model.PasswordModify">
        update h_users
        set password=#{modify.newPassword}
        where username = #{modify.username}
          and app=#{app}
    </update>

    <select id="queryUserByName" resultType="com.github.hbq969.code.sm.login.dao.entity.UserEntity">
        select
        a.app AS "app",
        a.username AS "username",
        a.password AS "password",
        a.role_name AS "roleName",
        b.name AS "roleName",
        a.created_at AS "createdAt",
        a.updated_at AS "updatedAt"
        from h_users a,h_roles b
        <where>
            a.role_name=b.name
            and a.app=b.app
            and a.app=#{app}
            and a.username=#{name}
        </where>
    </select>
</mapper>